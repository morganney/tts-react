"use strict";(globalThis.webpackChunkstory=globalThis.webpackChunkstory||[]).push([[124],{"../tts-react/dist/hook.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{d:()=>useTts});var react=__webpack_require__("../../node_modules/react/index.js");const punctuationRgx=/[^\P{P}'/-]+/gu,stripPunctuation=text=>text.replace(punctuationRgx,"");var Events=function(Events){return Events.BOUNDARY="boundary",Events.END="end",Events.ERROR="error",Events.PAUSED="paused",Events.PITCH="pitch",Events.PLAYING="playing",Events.RATE="rate",Events.READY="ready",Events.VOLUME="volume",Events}(Events||{});class Controller extends EventTarget{#target;#synthesizer;#dispatchBoundaries=!0;#fetchAudioData=async()=>({audio:"",marks:[]});#marks=[];#text="";#lang="";#aborter=new AbortController;#initialized=!1;constructor(options){super(),this.#lang=options?.lang??this.#lang,this.#synthesizer=window.speechSynthesis,this.#target=new SpeechSynthesisUtterance(this.#text),this.#dispatchBoundaries=options?.dispatchBoundaries??this.#dispatchBoundaries,options?.fetchAudioData?(this.#target=this.#synthesizer=new Audio,this.#fetchAudioData=options.fetchAudioData):(this.#initWebSpeechVoice(options?.voice),window.speechSynthesis&&(window.speechSynthesis.onvoiceschanged=()=>{this.#initWebSpeechVoice(options?.voice)}))}#initWebSpeechVoice(voice){if(this.#target instanceof SpeechSynthesisUtterance){let voices=window.speechSynthesis.getVoices();voice&&(this.#target.voice=voice),this.#lang&&(voices=voices.filter((voice=>voice.lang===this.#lang)),this.#target.voice=voices[0]??null,voice&&voice.lang===this.#lang&&(this.#target.voice=voice))}}async#attachAudioSource(){if(this.#synthesizer instanceof HTMLAudioElement){let data=null;try{data=await this.#fetchAudioData(this.#text)}catch(err){err instanceof Error&&this.#dispatchError(err.message)}finally{data?.audio&&(this.#synthesizer.src=data.audio,this.#marks=data.marks??this.#marks)}}}#dispatchEnd(evt){this.dispatchEvent(new CustomEvent(Events.END,{detail:evt}))}#dispatchError(msg){this.dispatchEvent(new CustomEvent(Events.ERROR,{detail:msg}))}#dispatchReady(){this.dispatchEvent(new Event(Events.READY))}#dispatchPlaying(evt){this.dispatchEvent(new CustomEvent(Events.PLAYING,{detail:evt}))}#dispatchPaused(evt){this.dispatchEvent(new CustomEvent(Events.PAUSED,{detail:evt}))}#dispatchBoundary(evt,boundary){this.dispatchEvent(new CustomEvent(Events.BOUNDARY,{detail:{evt,boundary}}))}#dispatchVolume(volume){this.dispatchEvent(new CustomEvent(Events.VOLUME,{detail:volume}))}#dispatchRate(rate){this.dispatchEvent(new CustomEvent(Events.RATE,{detail:rate}))}#dispatchPitch(pitch){this.dispatchEvent(new CustomEvent(Events.PITCH,{detail:pitch}))}async#playHtmlAudio(){const audio=this.#synthesizer;try{await audio.play()}catch(err){err instanceof Error&&this.#dispatchError(err.message)}}#getPollySpeechMarkForAudioTime(time){const length=this.#marks.length;let bestMatch=this.#marks[0],found=!1,i=1;for(;i<length&&!found;)this.#marks[i].time<=time?bestMatch=this.#marks[i]:found=!0,i++;return bestMatch}#getBoundaryWordCharLength(startIndex){const match=this.#text.substring(startIndex).match(/.+?\b/);return match?match[0].length:0}#clamp(value){let min=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,max=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.max(min,Math.min(value,max))}#recycle(){return this.#aborter.abort(),this.#aborter=new AbortController,this.#aborter.signal}#utteranceInit(){if(this.#target instanceof SpeechSynthesisUtterance){const signal=this.#recycle();this.#target.addEventListener("end",this.#dispatchEnd.bind(this),{signal}),this.#target.addEventListener("start",this.#dispatchPlaying.bind(this),{signal}),this.#target.addEventListener("resume",this.#dispatchPlaying.bind(this),{signal}),this.#target.addEventListener("pause",this.#dispatchPaused.bind(this),{signal}),this.#target.addEventListener("error",(evt=>{this.#dispatchError(evt.error)}),{signal}),this.#lang&&(this.#target.lang=this.#lang),this.#dispatchBoundaries&&this.#target.addEventListener("boundary",(evt=>{const{charIndex:startChar}=evt,endChar=startChar+(evt.charLength??this.#getBoundaryWordCharLength(startChar)),word=this.#text.substring(startChar,endChar);word&&!(text=>{const trimmed=text.trim();return punctuationRgx.test(trimmed)&&1===trimmed.length})(word)&&this.#dispatchBoundary(evt,{word,startChar,endChar})}),{signal}),this.#dispatchReady()}}async#htmlAudioInit(){if(this.#target instanceof HTMLAudioElement){const target=this.#target;this.#target.addEventListener("canplay",this.#dispatchReady.bind(this),{once:!0}),this.#target.addEventListener("playing",this.#dispatchPlaying.bind(this)),this.#target.addEventListener("pause",this.#dispatchPaused.bind(this)),this.#target.addEventListener("ended",this.#dispatchEnd.bind(this)),this.#target.addEventListener("error",(()=>{const error=target.error;this.#dispatchError(error?.message)})),this.#dispatchBoundaries&&this.#target.addEventListener("timeupdate",(evt=>{const currentTime=1e3*target.currentTime,mark=this.#getPollySpeechMarkForAudioTime(currentTime);mark&&!this.paused&&this.#dispatchBoundary(evt,{word:mark.value,startChar:mark.start,endChar:mark.end})})),await this.#attachAudioSource()}}get synthesizer(){return this.#synthesizer}get target(){return this.#target}set text(value){this.#text=value,this.#target instanceof SpeechSynthesisUtterance&&(this.#target.text=value)}get paused(){return this.#synthesizer.paused}get rate(){return this.#synthesizer instanceof HTMLAudioElement?this.#synthesizer.playbackRate:this.#target.rate}set rate(value){const clamped=this.#clamp(parseFloat(value.toPrecision(3)),.1,10);Number.isNaN(clamped)||(this.#dispatchRate(clamped),this.#synthesizer instanceof HTMLAudioElement&&(this.#synthesizer.defaultPlaybackRate=clamped,this.#synthesizer.playbackRate=clamped),this.#target instanceof SpeechSynthesisUtterance&&(this.#target.rate=clamped))}get pitch(){return this.#target instanceof SpeechSynthesisUtterance?this.#target.pitch:-1}set pitch(value){if(this.#target instanceof SpeechSynthesisUtterance){const clamped=this.#clamp(parseFloat(value.toPrecision(2)),0,2);Number.isNaN(clamped)||(this.#dispatchPitch(clamped),this.#target.pitch=clamped)}}get volumeMin(){return 0}get volumeMax(){return 1}get volume(){return this.#target.volume}set volume(value){const clamped=this.#clamp(parseFloat(value.toPrecision(2)),this.volumeMin,this.volumeMax);Number.isNaN(clamped)||(this.#dispatchVolume(clamped),this.#target.volume=clamped)}get preservesPitch(){return this.#synthesizer instanceof HTMLAudioElement&&this.#synthesizer.preservesPitch}set preservesPitch(value){this.#synthesizer instanceof HTMLAudioElement&&(this.#synthesizer.preservesPitch=value)}get lang(){return this.#lang}set lang(value){this.#target instanceof SpeechSynthesisUtterance&&(this.#lang=value,this.#target.lang=value,this.#target.voice=null,this.#initWebSpeechVoice())}async init(){this.#initialized||(this.#target instanceof SpeechSynthesisUtterance&&this.#utteranceInit(),this.#target instanceof HTMLAudioElement&&await this.#htmlAudioInit(),this.#initialized=!0)}async play(){this.#synthesizer instanceof HTMLAudioElement?await this.#playHtmlAudio():this.#synthesizer.speak(this.#target)}pause(){this.#synthesizer.pause()}async resume(){this.#synthesizer instanceof HTMLAudioElement?await this.#playHtmlAudio():this.#synthesizer.resume()}async replay(){this.#synthesizer instanceof HTMLAudioElement?(this.#synthesizer.load(),await this.#playHtmlAudio()):(this.#synthesizer.resume(),this.#synthesizer.cancel(),this.#synthesizer.speak(this.#target))}cancel(){this.#synthesizer instanceof HTMLAudioElement?this.#synthesizer.load():this.#synthesizer.cancel()}mute(){this.volume=0,this.#synthesizer instanceof HTMLAudioElement||this.paused||!this.#synthesizer.speaking||this.replay()}unmute(volume){this.volume=volume??1,this.#synthesizer instanceof HTMLAudioElement||this.paused||!this.#synthesizer.speaking||this.replay()}}var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const Highlighter=_ref2=>{let{text,mark,color,backgroundColor}=_ref2;const markStyle=(0,react.useMemo)((()=>(_ref=>{let{color,backgroundColor}=_ref;return{color,backgroundColor}})({color,backgroundColor})),[color,backgroundColor]);if(text&&mark){const textStr=text.toString(),escapedMark=mark.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),regex=new RegExp(`(${escapedMark})`,"gi"),parts=textStr.split(regex);if(parts.length>1)return(0,jsx_runtime.jsx)("span",{children:parts.map(((part,idx)=>{const key=`${part}-${idx}`;return part?regex.test(part)?(0,jsx_runtime.jsx)("mark",{style:markStyle,children:part},key):(0,jsx_runtime.jsx)("span",{children:part},key):null}))})}return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:text})},parseChildrenRecursively=_ref=>{let{children,buffer,boundary,markColor,markBackgroundColor,markTextAsSpoken}=_ref;return react.Children.map(children,(child=>{let currentChild=child;if((0,react.isValidElement)(child)&&(currentChild=(0,react.cloneElement)(child,{...child.props,children:parseChildrenRecursively({buffer,boundary,markColor,markBackgroundColor,markTextAsSpoken,children:child.props.children})})),"string"==typeof(value=child)||"number"==typeof value){const text=child.toString(),{word,startChar,endChar}=boundary,bufferTextLength=buffer.text.length;if(buffer.text+=`${text} `,markTextAsSpoken&&word){const start=startChar-bufferTextLength,end=endChar-bufferTextLength,prev=text.substring(0,start),found=text.substring(start,end),after=text.substring(end,text.length);if(found)return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[prev,(0,jsx_runtime.jsx)(Highlighter,{text:found,mark:stripPunctuation(found),color:markColor,backgroundColor:markBackgroundColor}),after]})}}var value;return currentChild}))},defaultBoundary={word:"",startChar:0,endChar:0},reducer=(state,action)=>{switch(action.type){case"pause":return{...state,isPlaying:!1,isPaused:!0,isError:!1};case"play":case"reset":return{...state,isPlaying:!0,isPaused:!1,isError:!1,boundary:defaultBoundary};case"end":return{...state,isPlaying:!1,isPaused:!1,isError:!1,boundary:defaultBoundary};case"error":return{...state,isPlaying:!1,isPaused:!1,isError:!0,boundary:defaultBoundary};case"ready":return{...state,isReady:!0};case"boundary":return{...state,boundary:{...state.boundary,...action.payload}};case"voices":return{...state,voices:action.payload};case"stop":return{...state,isPlaying:!1,isPaused:!1,isError:!1};case"muted":return{...state,isMuted:!0};case"unmuted":return{...state,isMuted:!1}}},useTts=_ref2=>{let{lang,rate,volume,voice,children,markColor,markBackgroundColor,onStart,onPause,onBoundary,onEnd,onError,onVolumeChange,onPitchChange,onRateChange,fetchAudioData,autoPlay=!1,markTextAsSpoken=!1}=_ref2;const spokenTextRef=(0,react.useRef)(),[state,dispatch]=(0,react.useReducer)(reducer,{voices:window.speechSynthesis?.getVoices()??[],boundary:defaultBoundary,isPlaying:!1,isPaused:!1,isMuted:!1,isError:!1,isReady:void 0===fetchAudioData}),[ttsChildren,spokenText]=(0,react.useMemo)((()=>{if(void 0===spokenTextRef.current||markTextAsSpoken){const buffer={text:""},parsed=parseChildrenRecursively({children,buffer,markColor,markBackgroundColor,markTextAsSpoken,boundary:state.boundary});return spokenTextRef.current=buffer.text.trim(),[parsed,spokenTextRef.current]}return[children,spokenTextRef.current]}),[children,state.boundary,markColor,markBackgroundColor,markTextAsSpoken]),controller=(0,react.useMemo)((()=>new Controller({lang,voice,fetchAudioData})),[lang,voice,fetchAudioData]),play=(0,react.useCallback)((async()=>{state.isPaused?controller.resume():controller.replay(),dispatch({type:"play"})}),[controller,state.isPaused]),pause=(0,react.useCallback)((()=>{controller.pause(),dispatch({type:"pause"})}),[controller]),replay=(0,react.useCallback)((()=>{controller.replay(),dispatch({type:"reset"})}),[controller]),stop=(0,react.useCallback)((()=>{controller.cancel(),dispatch({type:"stop"})}),[controller]),toggleMuteHandler=(0,react.useCallback)((callback=>{const wasMuted=parseFloat(controller.volume.toFixed(2))===controller.volumeMin;wasMuted?(controller.unmute(),dispatch({type:"unmuted"})):(controller.mute(),dispatch({type:"muted"})),"function"==typeof callback&&callback(wasMuted)}),[controller]),playOrPause=(0,react.useMemo)((()=>state.isPlaying?pause:play),[state.isPlaying,pause,play]),playOrStop=(0,react.useMemo)((()=>state.isPlaying?stop:play),[state.isPlaying,stop,play]),[get,set]=(0,react.useMemo)((()=>[{lang:()=>controller.lang,rate:()=>controller.rate,pitch:()=>controller.pitch,volume:()=>controller.volume,preservesPitch:()=>controller.preservesPitch},{lang(value){controller.lang=value},rate(value){controller.rate=value},pitch(value){controller.pitch=value},volume(value){controller.volume=value},preservesPitch(value){controller.preservesPitch=value}}]),[controller]),onStartHandler=(0,react.useCallback)((evt=>{dispatch({type:"play"}),"function"==typeof onStart&&onStart(evt.detail)}),[onStart]),onPauseHandler=(0,react.useCallback)((evt=>{"function"==typeof onPause&&onPause(evt.detail)}),[onPause]),onEndHandler=(0,react.useCallback)((evt=>{dispatch({type:"end"}),"function"==typeof onEnd&&onEnd(evt.detail)}),[onEnd]),onReady=(0,react.useCallback)((()=>{dispatch({type:"ready"})}),[]),onErrorHandler=(0,react.useCallback)((evt=>{dispatch({type:"error"}),"function"==typeof onError&&onError(evt.detail)}),[onError]),onBoundaryHandler=(0,react.useCallback)((evt=>{dispatch({type:"boundary",payload:evt.detail.boundary}),"function"==typeof onBoundary&&onBoundary(evt.detail.boundary,evt.detail.evt)}),[onBoundary]),onVolume=(0,react.useCallback)((evt=>{const volume=evt.detail,min=controller.volumeMin;volume===min&&controller.volume!==min&&dispatch({type:"muted"}),volume!==min&&controller.volume===min&&dispatch({type:"unmuted"}),"function"==typeof onVolumeChange&&onVolumeChange(volume)}),[onVolumeChange,controller]),onPitch=(0,react.useCallback)((evt=>{"function"==typeof onPitchChange&&onPitchChange(evt.detail)}),[onPitchChange]),onRate=(0,react.useCallback)((evt=>{"function"==typeof onRateChange&&onRateChange(evt.detail)}),[onRateChange]);return(0,react.useEffect)((()=>{controller.text=spokenText}),[spokenText,controller]),(0,react.useEffect)((()=>{rate&&Number.isFinite(rate)&&(controller.rate=rate),volume&&Number.isFinite(volume)&&(controller.volume=volume)}),[controller,rate,volume]),(0,react.useEffect)((()=>{const onBeforeUnload=()=>{controller.cancel()};return(async()=>{controller.addEventListener(Events.PLAYING,onStartHandler),controller.addEventListener(Events.PAUSED,onPauseHandler),controller.addEventListener(Events.END,onEndHandler),controller.addEventListener(Events.ERROR,onErrorHandler),controller.addEventListener(Events.READY,onReady),controller.addEventListener(Events.BOUNDARY,onBoundaryHandler),controller.addEventListener(Events.VOLUME,onVolume),controller.addEventListener(Events.PITCH,onPitch),controller.addEventListener(Events.RATE,onRate),window.addEventListener("beforeunload",onBeforeUnload),await controller.init()})(),()=>{window.removeEventListener("beforeunload",onBeforeUnload),controller.removeEventListener(Events.PLAYING,onStartHandler),controller.removeEventListener(Events.PAUSED,onPauseHandler),controller.removeEventListener(Events.END,onEndHandler),controller.removeEventListener(Events.ERROR,onErrorHandler),controller.removeEventListener(Events.READY,onReady),controller.removeEventListener(Events.BOUNDARY,onBoundaryHandler),controller.removeEventListener(Events.VOLUME,onVolume),controller.removeEventListener(Events.PITCH,onPitch),controller.removeEventListener(Events.RATE,onRate)}}),[onStartHandler,onBoundaryHandler,onPauseHandler,onEndHandler,onReady,onErrorHandler,onBoundary,onVolume,onPitch,onRate,controller]),(0,react.useEffect)((()=>{autoPlay&&state.isReady&&(controller.replay(),dispatch({type:"play"}))}),[autoPlay,controller,state.isReady,spokenText]),(0,react.useEffect)((()=>{const onVoicesChanged=()=>{dispatch({type:"voices",payload:window.speechSynthesis.getVoices()})};return"function"==typeof window.speechSynthesis?.addEventListener&&window.speechSynthesis.addEventListener("voiceschanged",onVoicesChanged),()=>{"function"==typeof window.speechSynthesis?.removeEventListener&&window.speechSynthesis.removeEventListener("voiceschanged",onVoicesChanged)}}),[]),{get,set,state,spokenText,ttsChildren,play,stop,pause,replay,playOrStop,playOrPause,toggleMute:toggleMuteHandler}}}}]);